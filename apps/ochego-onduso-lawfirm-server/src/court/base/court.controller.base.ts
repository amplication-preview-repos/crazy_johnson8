/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CourtService } from "../court.service";
import { CourtCreateInput } from "./CourtCreateInput";
import { Court } from "./Court";
import { CourtFindManyArgs } from "./CourtFindManyArgs";
import { CourtWhereUniqueInput } from "./CourtWhereUniqueInput";
import { CourtUpdateInput } from "./CourtUpdateInput";

export class CourtControllerBase {
  constructor(protected readonly service: CourtService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Court })
  async createCourt(@common.Body() data: CourtCreateInput): Promise<Court> {
    return await this.service.createCourt({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Court] })
  @ApiNestedQuery(CourtFindManyArgs)
  async courts(@common.Req() request: Request): Promise<Court[]> {
    const args = plainToClass(CourtFindManyArgs, request.query);
    return this.service.courts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Court })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async court(
    @common.Param() params: CourtWhereUniqueInput
  ): Promise<Court | null> {
    const result = await this.service.court({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Court })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCourt(
    @common.Param() params: CourtWhereUniqueInput,
    @common.Body() data: CourtUpdateInput
  ): Promise<Court | null> {
    try {
      return await this.service.updateCourt({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Court })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCourt(
    @common.Param() params: CourtWhereUniqueInput
  ): Promise<Court | null> {
    try {
      return await this.service.deleteCourt({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
