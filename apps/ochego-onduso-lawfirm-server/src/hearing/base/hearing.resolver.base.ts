/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Hearing } from "./Hearing";
import { HearingCountArgs } from "./HearingCountArgs";
import { HearingFindManyArgs } from "./HearingFindManyArgs";
import { HearingFindUniqueArgs } from "./HearingFindUniqueArgs";
import { DeleteHearingArgs } from "./DeleteHearingArgs";
import { HearingService } from "../hearing.service";
@graphql.Resolver(() => Hearing)
export class HearingResolverBase {
  constructor(protected readonly service: HearingService) {}

  async _hearingsMeta(
    @graphql.Args() args: HearingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Hearing])
  async hearings(
    @graphql.Args() args: HearingFindManyArgs
  ): Promise<Hearing[]> {
    return this.service.hearings(args);
  }

  @graphql.Query(() => Hearing, { nullable: true })
  async hearing(
    @graphql.Args() args: HearingFindUniqueArgs
  ): Promise<Hearing | null> {
    const result = await this.service.hearing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Hearing)
  async deleteHearing(
    @graphql.Args() args: DeleteHearingArgs
  ): Promise<Hearing | null> {
    try {
      return await this.service.deleteHearing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
