/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HearingService } from "../hearing.service";
import { HearingCreateInput } from "./HearingCreateInput";
import { Hearing } from "./Hearing";
import { HearingFindManyArgs } from "./HearingFindManyArgs";
import { HearingWhereUniqueInput } from "./HearingWhereUniqueInput";
import { HearingUpdateInput } from "./HearingUpdateInput";

export class HearingControllerBase {
  constructor(protected readonly service: HearingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hearing })
  async createHearing(
    @common.Body() data: HearingCreateInput
  ): Promise<Hearing> {
    return await this.service.createHearing({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Hearing] })
  @ApiNestedQuery(HearingFindManyArgs)
  async hearings(@common.Req() request: Request): Promise<Hearing[]> {
    const args = plainToClass(HearingFindManyArgs, request.query);
    return this.service.hearings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hearing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hearing(
    @common.Param() params: HearingWhereUniqueInput
  ): Promise<Hearing | null> {
    const result = await this.service.hearing({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hearing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHearing(
    @common.Param() params: HearingWhereUniqueInput,
    @common.Body() data: HearingUpdateInput
  ): Promise<Hearing | null> {
    try {
      return await this.service.updateHearing({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hearing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHearing(
    @common.Param() params: HearingWhereUniqueInput
  ): Promise<Hearing | null> {
    try {
      return await this.service.deleteHearing({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
