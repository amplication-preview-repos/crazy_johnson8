/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LawyerService } from "../lawyer.service";
import { LawyerCreateInput } from "./LawyerCreateInput";
import { Lawyer } from "./Lawyer";
import { LawyerFindManyArgs } from "./LawyerFindManyArgs";
import { LawyerWhereUniqueInput } from "./LawyerWhereUniqueInput";
import { LawyerUpdateInput } from "./LawyerUpdateInput";

export class LawyerControllerBase {
  constructor(protected readonly service: LawyerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lawyer })
  async createLawyer(@common.Body() data: LawyerCreateInput): Promise<Lawyer> {
    return await this.service.createLawyer({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Lawyer] })
  @ApiNestedQuery(LawyerFindManyArgs)
  async lawyers(@common.Req() request: Request): Promise<Lawyer[]> {
    const args = plainToClass(LawyerFindManyArgs, request.query);
    return this.service.lawyers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lawyer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lawyer(
    @common.Param() params: LawyerWhereUniqueInput
  ): Promise<Lawyer | null> {
    const result = await this.service.lawyer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lawyer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLawyer(
    @common.Param() params: LawyerWhereUniqueInput,
    @common.Body() data: LawyerUpdateInput
  ): Promise<Lawyer | null> {
    try {
      return await this.service.updateLawyer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lawyer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLawyer(
    @common.Param() params: LawyerWhereUniqueInput
  ): Promise<Lawyer | null> {
    try {
      return await this.service.deleteLawyer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
