/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Lawyer as PrismaLawyer } from "@prisma/client";

export class LawyerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LawyerCountArgs, "select">): Promise<number> {
    return this.prisma.lawyer.count(args);
  }

  async lawyers(args: Prisma.LawyerFindManyArgs): Promise<PrismaLawyer[]> {
    return this.prisma.lawyer.findMany(args);
  }
  async lawyer(
    args: Prisma.LawyerFindUniqueArgs
  ): Promise<PrismaLawyer | null> {
    return this.prisma.lawyer.findUnique(args);
  }
  async createLawyer(args: Prisma.LawyerCreateArgs): Promise<PrismaLawyer> {
    return this.prisma.lawyer.create(args);
  }
  async updateLawyer(args: Prisma.LawyerUpdateArgs): Promise<PrismaLawyer> {
    return this.prisma.lawyer.update(args);
  }
  async deleteLawyer(args: Prisma.LawyerDeleteArgs): Promise<PrismaLawyer> {
    return this.prisma.lawyer.delete(args);
  }
}
