/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lawyer } from "./Lawyer";
import { LawyerCountArgs } from "./LawyerCountArgs";
import { LawyerFindManyArgs } from "./LawyerFindManyArgs";
import { LawyerFindUniqueArgs } from "./LawyerFindUniqueArgs";
import { DeleteLawyerArgs } from "./DeleteLawyerArgs";
import { LawyerService } from "../lawyer.service";
@graphql.Resolver(() => Lawyer)
export class LawyerResolverBase {
  constructor(protected readonly service: LawyerService) {}

  async _lawyersMeta(
    @graphql.Args() args: LawyerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lawyer])
  async lawyers(@graphql.Args() args: LawyerFindManyArgs): Promise<Lawyer[]> {
    return this.service.lawyers(args);
  }

  @graphql.Query(() => Lawyer, { nullable: true })
  async lawyer(
    @graphql.Args() args: LawyerFindUniqueArgs
  ): Promise<Lawyer | null> {
    const result = await this.service.lawyer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lawyer)
  async deleteLawyer(
    @graphql.Args() args: DeleteLawyerArgs
  ): Promise<Lawyer | null> {
    try {
      return await this.service.deleteLawyer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
